// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notify/QuotePushTickNotify.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_notify_2fQuotePushTickNotify_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_notify_2fQuotePushTickNotify_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common/Stock.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_notify_2fQuotePushTickNotify_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_notify_2fQuotePushTickNotify_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_notify_2fQuotePushTickNotify_2eproto;
namespace Quote {
class PushTickItem;
struct PushTickItemDefaultTypeInternal;
extern PushTickItemDefaultTypeInternal _PushTickItem_default_instance_;
class PushTickNotify;
struct PushTickNotifyDefaultTypeInternal;
extern PushTickNotifyDefaultTypeInternal _PushTickNotify_default_instance_;
}  // namespace Quote
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Quote {

// ===================================================================


// -------------------------------------------------------------------

class PushTickItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Quote.PushTickItem) */ {
 public:
  inline PushTickItem() : PushTickItem(nullptr) {}
  ~PushTickItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PushTickItem(::google::protobuf::internal::ConstantInitialized);

  inline PushTickItem(const PushTickItem& from)
      : PushTickItem(nullptr, from) {}
  PushTickItem(PushTickItem&& from) noexcept
    : PushTickItem() {
    *this = ::std::move(from);
  }

  inline PushTickItem& operator=(const PushTickItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushTickItem& operator=(PushTickItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushTickItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushTickItem* internal_default_instance() {
    return reinterpret_cast<const PushTickItem*>(
               &_PushTickItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PushTickItem& a, PushTickItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PushTickItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushTickItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushTickItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushTickItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushTickItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PushTickItem& from) {
    PushTickItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PushTickItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Quote.PushTickItem";
  }
  protected:
  explicit PushTickItem(::google::protobuf::Arena* arena);
  PushTickItem(::google::protobuf::Arena* arena, const PushTickItem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 2,
    kChgFieldNumber = 3,
    kChgPercentFieldNumber = 4,
    kBidFieldNumber = 5,
    kAskFieldNumber = 6,
    kStockFieldNumber = 1,
  };
  // string price = 2;
  void clear_price() ;
  const std::string& price() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* value);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // string chg = 3;
  void clear_chg() ;
  const std::string& chg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chg(Arg_&& arg, Args_... args);
  std::string* mutable_chg();
  PROTOBUF_NODISCARD std::string* release_chg();
  void set_allocated_chg(std::string* value);

  private:
  const std::string& _internal_chg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chg(
      const std::string& value);
  std::string* _internal_mutable_chg();

  public:
  // string chgPercent = 4;
  void clear_chgpercent() ;
  const std::string& chgpercent() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chgpercent(Arg_&& arg, Args_... args);
  std::string* mutable_chgpercent();
  PROTOBUF_NODISCARD std::string* release_chgpercent();
  void set_allocated_chgpercent(std::string* value);

  private:
  const std::string& _internal_chgpercent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chgpercent(
      const std::string& value);
  std::string* _internal_mutable_chgpercent();

  public:
  // string bid = 5;
  void clear_bid() ;
  const std::string& bid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bid(Arg_&& arg, Args_... args);
  std::string* mutable_bid();
  PROTOBUF_NODISCARD std::string* release_bid();
  void set_allocated_bid(std::string* value);

  private:
  const std::string& _internal_bid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bid(
      const std::string& value);
  std::string* _internal_mutable_bid();

  public:
  // string ask = 6;
  void clear_ask() ;
  const std::string& ask() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ask(Arg_&& arg, Args_... args);
  std::string* mutable_ask();
  PROTOBUF_NODISCARD std::string* release_ask();
  void set_allocated_ask(std::string* value);

  private:
  const std::string& _internal_ask() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ask(
      const std::string& value);
  std::string* _internal_mutable_ask();

  public:
  // .Stock stock = 1;
  bool has_stock() const;
  void clear_stock() ;
  const ::Stock& stock() const;
  PROTOBUF_NODISCARD ::Stock* release_stock();
  ::Stock* mutable_stock();
  void set_allocated_stock(::Stock* value);
  void unsafe_arena_set_allocated_stock(::Stock* value);
  ::Stock* unsafe_arena_release_stock();

  private:
  const ::Stock& _internal_stock() const;
  ::Stock* _internal_mutable_stock();

  public:
  // @@protoc_insertion_point(class_scope:Quote.PushTickItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr price_;
    ::google::protobuf::internal::ArenaStringPtr chg_;
    ::google::protobuf::internal::ArenaStringPtr chgpercent_;
    ::google::protobuf::internal::ArenaStringPtr bid_;
    ::google::protobuf::internal::ArenaStringPtr ask_;
    ::Stock* stock_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notify_2fQuotePushTickNotify_2eproto;
};// -------------------------------------------------------------------

class PushTickNotify final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Quote.PushTickNotify) */ {
 public:
  inline PushTickNotify() : PushTickNotify(nullptr) {}
  ~PushTickNotify() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PushTickNotify(::google::protobuf::internal::ConstantInitialized);

  inline PushTickNotify(const PushTickNotify& from)
      : PushTickNotify(nullptr, from) {}
  PushTickNotify(PushTickNotify&& from) noexcept
    : PushTickNotify() {
    *this = ::std::move(from);
  }

  inline PushTickNotify& operator=(const PushTickNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushTickNotify& operator=(PushTickNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushTickNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushTickNotify* internal_default_instance() {
    return reinterpret_cast<const PushTickNotify*>(
               &_PushTickNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PushTickNotify& a, PushTickNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(PushTickNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushTickNotify* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushTickNotify* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushTickNotify>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushTickNotify& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PushTickNotify& from) {
    PushTickNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PushTickNotify* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Quote.PushTickNotify";
  }
  protected:
  explicit PushTickNotify(::google::protobuf::Arena* arena);
  PushTickNotify(::google::protobuf::Arena* arena, const PushTickNotify& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickListFieldNumber = 1,
  };
  // repeated .Quote.PushTickItem tickList = 1;
  int ticklist_size() const;
  private:
  int _internal_ticklist_size() const;

  public:
  void clear_ticklist() ;
  ::Quote::PushTickItem* mutable_ticklist(int index);
  ::google::protobuf::RepeatedPtrField< ::Quote::PushTickItem >*
      mutable_ticklist();
  private:
  const ::google::protobuf::RepeatedPtrField<::Quote::PushTickItem>& _internal_ticklist() const;
  ::google::protobuf::RepeatedPtrField<::Quote::PushTickItem>* _internal_mutable_ticklist();
  public:
  const ::Quote::PushTickItem& ticklist(int index) const;
  ::Quote::PushTickItem* add_ticklist();
  const ::google::protobuf::RepeatedPtrField< ::Quote::PushTickItem >&
      ticklist() const;
  // @@protoc_insertion_point(class_scope:Quote.PushTickNotify)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::Quote::PushTickItem > ticklist_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notify_2fQuotePushTickNotify_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PushTickItem

// .Stock stock = 1;
inline bool PushTickItem::has_stock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stock_ != nullptr);
  return value;
}
inline const ::Stock& PushTickItem::_internal_stock() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::Stock* p = _impl_.stock_;
  return p != nullptr ? *p : reinterpret_cast<const ::Stock&>(::_Stock_default_instance_);
}
inline const ::Stock& PushTickItem::stock() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.stock)
  return _internal_stock();
}
inline void PushTickItem::unsafe_arena_set_allocated_stock(::Stock* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stock_);
  }
  _impl_.stock_ = reinterpret_cast<::Stock*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Quote.PushTickItem.stock)
}
inline ::Stock* PushTickItem::release_stock() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Stock* released = _impl_.stock_;
  _impl_.stock_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::Stock* PushTickItem::unsafe_arena_release_stock() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.stock)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Stock* temp = _impl_.stock_;
  _impl_.stock_ = nullptr;
  return temp;
}
inline ::Stock* PushTickItem::_internal_mutable_stock() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stock_ == nullptr) {
    auto* p = CreateMaybeMessage<::Stock>(GetArena());
    _impl_.stock_ = reinterpret_cast<::Stock*>(p);
  }
  return _impl_.stock_;
}
inline ::Stock* PushTickItem::mutable_stock() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::Stock* _msg = _internal_mutable_stock();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.stock)
  return _msg;
}
inline void PushTickItem::set_allocated_stock(::Stock* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stock_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.stock_ = reinterpret_cast<::Stock*>(value);
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.stock)
}

// string price = 2;
inline void PushTickItem::clear_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_.ClearToEmpty();
}
inline const std::string& PushTickItem::price() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushTickItem::set_price(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Quote.PushTickItem.price)
}
inline std::string* PushTickItem::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.price)
  return _s;
}
inline const std::string& PushTickItem::_internal_price() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.price_.Get();
}
inline void PushTickItem::_internal_set_price(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.price_.Set(value, GetArena());
}
inline std::string* PushTickItem::_internal_mutable_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.price_.Mutable( GetArena());
}
inline std::string* PushTickItem::release_price() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.price)
  return _impl_.price_.Release();
}
inline void PushTickItem::set_allocated_price(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.price_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.price)
}

// string chg = 3;
inline void PushTickItem::clear_chg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chg_.ClearToEmpty();
}
inline const std::string& PushTickItem::chg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.chg)
  return _internal_chg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushTickItem::set_chg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Quote.PushTickItem.chg)
}
inline std::string* PushTickItem::mutable_chg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chg();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.chg)
  return _s;
}
inline const std::string& PushTickItem::_internal_chg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chg_.Get();
}
inline void PushTickItem::_internal_set_chg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chg_.Set(value, GetArena());
}
inline std::string* PushTickItem::_internal_mutable_chg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chg_.Mutable( GetArena());
}
inline std::string* PushTickItem::release_chg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.chg)
  return _impl_.chg_.Release();
}
inline void PushTickItem::set_allocated_chg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chg_.IsDefault()) {
          _impl_.chg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.chg)
}

// string chgPercent = 4;
inline void PushTickItem::clear_chgpercent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chgpercent_.ClearToEmpty();
}
inline const std::string& PushTickItem::chgpercent() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.chgPercent)
  return _internal_chgpercent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushTickItem::set_chgpercent(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chgpercent_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Quote.PushTickItem.chgPercent)
}
inline std::string* PushTickItem::mutable_chgpercent() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chgpercent();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.chgPercent)
  return _s;
}
inline const std::string& PushTickItem::_internal_chgpercent() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chgpercent_.Get();
}
inline void PushTickItem::_internal_set_chgpercent(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chgpercent_.Set(value, GetArena());
}
inline std::string* PushTickItem::_internal_mutable_chgpercent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chgpercent_.Mutable( GetArena());
}
inline std::string* PushTickItem::release_chgpercent() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.chgPercent)
  return _impl_.chgpercent_.Release();
}
inline void PushTickItem::set_allocated_chgpercent(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chgpercent_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chgpercent_.IsDefault()) {
          _impl_.chgpercent_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.chgPercent)
}

// string bid = 5;
inline void PushTickItem::clear_bid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bid_.ClearToEmpty();
}
inline const std::string& PushTickItem::bid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.bid)
  return _internal_bid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushTickItem::set_bid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Quote.PushTickItem.bid)
}
inline std::string* PushTickItem::mutable_bid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bid();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.bid)
  return _s;
}
inline const std::string& PushTickItem::_internal_bid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bid_.Get();
}
inline void PushTickItem::_internal_set_bid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bid_.Set(value, GetArena());
}
inline std::string* PushTickItem::_internal_mutable_bid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bid_.Mutable( GetArena());
}
inline std::string* PushTickItem::release_bid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.bid)
  return _impl_.bid_.Release();
}
inline void PushTickItem::set_allocated_bid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bid_.IsDefault()) {
          _impl_.bid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.bid)
}

// string ask = 6;
inline void PushTickItem::clear_ask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ask_.ClearToEmpty();
}
inline const std::string& PushTickItem::ask() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.ask)
  return _internal_ask();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PushTickItem::set_ask(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ask_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Quote.PushTickItem.ask)
}
inline std::string* PushTickItem::mutable_ask() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ask();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.ask)
  return _s;
}
inline const std::string& PushTickItem::_internal_ask() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ask_.Get();
}
inline void PushTickItem::_internal_set_ask(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ask_.Set(value, GetArena());
}
inline std::string* PushTickItem::_internal_mutable_ask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ask_.Mutable( GetArena());
}
inline std::string* PushTickItem::release_ask() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.ask)
  return _impl_.ask_.Release();
}
inline void PushTickItem::set_allocated_ask(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ask_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ask_.IsDefault()) {
          _impl_.ask_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.ask)
}

// -------------------------------------------------------------------

// PushTickNotify

// repeated .Quote.PushTickItem tickList = 1;
inline int PushTickNotify::_internal_ticklist_size() const {
  return _internal_ticklist().size();
}
inline int PushTickNotify::ticklist_size() const {
  return _internal_ticklist_size();
}
inline void PushTickNotify::clear_ticklist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ticklist_.Clear();
}
inline ::Quote::PushTickItem* PushTickNotify::mutable_ticklist(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Quote.PushTickNotify.tickList)
  return _internal_mutable_ticklist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Quote::PushTickItem>* PushTickNotify::mutable_ticklist()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Quote.PushTickNotify.tickList)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ticklist();
}
inline const ::Quote::PushTickItem& PushTickNotify::ticklist(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Quote.PushTickNotify.tickList)
  return _internal_ticklist().Get(index);
}
inline ::Quote::PushTickItem* PushTickNotify::add_ticklist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::Quote::PushTickItem* _add = _internal_mutable_ticklist()->Add();
  // @@protoc_insertion_point(field_add:Quote.PushTickNotify.tickList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Quote::PushTickItem>& PushTickNotify::ticklist() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Quote.PushTickNotify.tickList)
  return _internal_ticklist();
}
inline const ::google::protobuf::RepeatedPtrField<::Quote::PushTickItem>&
PushTickNotify::_internal_ticklist() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ticklist_;
}
inline ::google::protobuf::RepeatedPtrField<::Quote::PushTickItem>*
PushTickNotify::_internal_mutable_ticklist() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ticklist_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Quote


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_notify_2fQuotePushTickNotify_2eproto_2epb_2eh
