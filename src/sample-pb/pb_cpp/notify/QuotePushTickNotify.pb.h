// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notify/QuotePushTickNotify.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_notify_2fQuotePushTickNotify_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_notify_2fQuotePushTickNotify_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/Stock.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_notify_2fQuotePushTickNotify_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_notify_2fQuotePushTickNotify_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_notify_2fQuotePushTickNotify_2eproto;
namespace Quote {
class PushTickItem;
struct PushTickItemDefaultTypeInternal;
extern PushTickItemDefaultTypeInternal _PushTickItem_default_instance_;
class PushTickNotify;
struct PushTickNotifyDefaultTypeInternal;
extern PushTickNotifyDefaultTypeInternal _PushTickNotify_default_instance_;
}  // namespace Quote
PROTOBUF_NAMESPACE_OPEN
template<> ::Quote::PushTickItem* Arena::CreateMaybeMessage<::Quote::PushTickItem>(Arena*);
template<> ::Quote::PushTickNotify* Arena::CreateMaybeMessage<::Quote::PushTickNotify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Quote {

// ===================================================================

class PushTickItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quote.PushTickItem) */ {
 public:
  inline PushTickItem() : PushTickItem(nullptr) {}
  ~PushTickItem() override;
  explicit PROTOBUF_CONSTEXPR PushTickItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushTickItem(const PushTickItem& from);
  PushTickItem(PushTickItem&& from) noexcept
    : PushTickItem() {
    *this = ::std::move(from);
  }

  inline PushTickItem& operator=(const PushTickItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushTickItem& operator=(PushTickItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushTickItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushTickItem* internal_default_instance() {
    return reinterpret_cast<const PushTickItem*>(
               &_PushTickItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PushTickItem& a, PushTickItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PushTickItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushTickItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushTickItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushTickItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushTickItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PushTickItem& from) {
    PushTickItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushTickItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quote.PushTickItem";
  }
  protected:
  explicit PushTickItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 2,
    kChgFieldNumber = 3,
    kChgPercentFieldNumber = 4,
    kBidFieldNumber = 5,
    kAskFieldNumber = 6,
    kStockFieldNumber = 1,
  };
  // string price = 2;
  void clear_price();
  const std::string& price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // string chg = 3;
  void clear_chg();
  const std::string& chg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chg();
  PROTOBUF_NODISCARD std::string* release_chg();
  void set_allocated_chg(std::string* chg);
  private:
  const std::string& _internal_chg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chg(const std::string& value);
  std::string* _internal_mutable_chg();
  public:

  // string chgPercent = 4;
  void clear_chgpercent();
  const std::string& chgpercent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chgpercent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chgpercent();
  PROTOBUF_NODISCARD std::string* release_chgpercent();
  void set_allocated_chgpercent(std::string* chgpercent);
  private:
  const std::string& _internal_chgpercent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chgpercent(const std::string& value);
  std::string* _internal_mutable_chgpercent();
  public:

  // string bid = 5;
  void clear_bid();
  const std::string& bid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bid();
  PROTOBUF_NODISCARD std::string* release_bid();
  void set_allocated_bid(std::string* bid);
  private:
  const std::string& _internal_bid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bid(const std::string& value);
  std::string* _internal_mutable_bid();
  public:

  // string ask = 6;
  void clear_ask();
  const std::string& ask() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ask(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ask();
  PROTOBUF_NODISCARD std::string* release_ask();
  void set_allocated_ask(std::string* ask);
  private:
  const std::string& _internal_ask() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ask(const std::string& value);
  std::string* _internal_mutable_ask();
  public:

  // .Stock stock = 1;
  bool has_stock() const;
  private:
  bool _internal_has_stock() const;
  public:
  void clear_stock();
  const ::Stock& stock() const;
  PROTOBUF_NODISCARD ::Stock* release_stock();
  ::Stock* mutable_stock();
  void set_allocated_stock(::Stock* stock);
  private:
  const ::Stock& _internal_stock() const;
  ::Stock* _internal_mutable_stock();
  public:
  void unsafe_arena_set_allocated_stock(
      ::Stock* stock);
  ::Stock* unsafe_arena_release_stock();

  // @@protoc_insertion_point(class_scope:Quote.PushTickItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chgpercent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ask_;
    ::Stock* stock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notify_2fQuotePushTickNotify_2eproto;
};
// -------------------------------------------------------------------

class PushTickNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Quote.PushTickNotify) */ {
 public:
  inline PushTickNotify() : PushTickNotify(nullptr) {}
  ~PushTickNotify() override;
  explicit PROTOBUF_CONSTEXPR PushTickNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PushTickNotify(const PushTickNotify& from);
  PushTickNotify(PushTickNotify&& from) noexcept
    : PushTickNotify() {
    *this = ::std::move(from);
  }

  inline PushTickNotify& operator=(const PushTickNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushTickNotify& operator=(PushTickNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushTickNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushTickNotify* internal_default_instance() {
    return reinterpret_cast<const PushTickNotify*>(
               &_PushTickNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PushTickNotify& a, PushTickNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(PushTickNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushTickNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushTickNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PushTickNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PushTickNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PushTickNotify& from) {
    PushTickNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushTickNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Quote.PushTickNotify";
  }
  protected:
  explicit PushTickNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickListFieldNumber = 1,
  };
  // repeated .Quote.PushTickItem tickList = 1;
  int ticklist_size() const;
  private:
  int _internal_ticklist_size() const;
  public:
  void clear_ticklist();
  ::Quote::PushTickItem* mutable_ticklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quote::PushTickItem >*
      mutable_ticklist();
  private:
  const ::Quote::PushTickItem& _internal_ticklist(int index) const;
  ::Quote::PushTickItem* _internal_add_ticklist();
  public:
  const ::Quote::PushTickItem& ticklist(int index) const;
  ::Quote::PushTickItem* add_ticklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quote::PushTickItem >&
      ticklist() const;

  // @@protoc_insertion_point(class_scope:Quote.PushTickNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quote::PushTickItem > ticklist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_notify_2fQuotePushTickNotify_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PushTickItem

// .Stock stock = 1;
inline bool PushTickItem::_internal_has_stock() const {
  return this != internal_default_instance() && _impl_.stock_ != nullptr;
}
inline bool PushTickItem::has_stock() const {
  return _internal_has_stock();
}
inline const ::Stock& PushTickItem::_internal_stock() const {
  const ::Stock* p = _impl_.stock_;
  return p != nullptr ? *p : reinterpret_cast<const ::Stock&>(
      ::_Stock_default_instance_);
}
inline const ::Stock& PushTickItem::stock() const {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.stock)
  return _internal_stock();
}
inline void PushTickItem::unsafe_arena_set_allocated_stock(
    ::Stock* stock) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stock_);
  }
  _impl_.stock_ = stock;
  if (stock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Quote.PushTickItem.stock)
}
inline ::Stock* PushTickItem::release_stock() {
  
  ::Stock* temp = _impl_.stock_;
  _impl_.stock_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Stock* PushTickItem::unsafe_arena_release_stock() {
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.stock)
  
  ::Stock* temp = _impl_.stock_;
  _impl_.stock_ = nullptr;
  return temp;
}
inline ::Stock* PushTickItem::_internal_mutable_stock() {
  
  if (_impl_.stock_ == nullptr) {
    auto* p = CreateMaybeMessage<::Stock>(GetArenaForAllocation());
    _impl_.stock_ = p;
  }
  return _impl_.stock_;
}
inline ::Stock* PushTickItem::mutable_stock() {
  ::Stock* _msg = _internal_mutable_stock();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.stock)
  return _msg;
}
inline void PushTickItem::set_allocated_stock(::Stock* stock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stock_);
  }
  if (stock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stock));
    if (message_arena != submessage_arena) {
      stock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stock, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stock_ = stock;
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.stock)
}

// string price = 2;
inline void PushTickItem::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& PushTickItem::price() const {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.price)
  return _internal_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PushTickItem::set_price(ArgT0&& arg0, ArgT... args) {
 
 _impl_.price_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quote.PushTickItem.price)
}
inline std::string* PushTickItem::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.price)
  return _s;
}
inline const std::string& PushTickItem::_internal_price() const {
  return _impl_.price_.Get();
}
inline void PushTickItem::_internal_set_price(const std::string& value) {
  
  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* PushTickItem::_internal_mutable_price() {
  
  return _impl_.price_.Mutable(GetArenaForAllocation());
}
inline std::string* PushTickItem::release_price() {
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.price)
  return _impl_.price_.Release();
}
inline void PushTickItem::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  _impl_.price_.SetAllocated(price, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.price_.IsDefault()) {
    _impl_.price_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.price)
}

// string chg = 3;
inline void PushTickItem::clear_chg() {
  _impl_.chg_.ClearToEmpty();
}
inline const std::string& PushTickItem::chg() const {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.chg)
  return _internal_chg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PushTickItem::set_chg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quote.PushTickItem.chg)
}
inline std::string* PushTickItem::mutable_chg() {
  std::string* _s = _internal_mutable_chg();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.chg)
  return _s;
}
inline const std::string& PushTickItem::_internal_chg() const {
  return _impl_.chg_.Get();
}
inline void PushTickItem::_internal_set_chg(const std::string& value) {
  
  _impl_.chg_.Set(value, GetArenaForAllocation());
}
inline std::string* PushTickItem::_internal_mutable_chg() {
  
  return _impl_.chg_.Mutable(GetArenaForAllocation());
}
inline std::string* PushTickItem::release_chg() {
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.chg)
  return _impl_.chg_.Release();
}
inline void PushTickItem::set_allocated_chg(std::string* chg) {
  if (chg != nullptr) {
    
  } else {
    
  }
  _impl_.chg_.SetAllocated(chg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chg_.IsDefault()) {
    _impl_.chg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.chg)
}

// string chgPercent = 4;
inline void PushTickItem::clear_chgpercent() {
  _impl_.chgpercent_.ClearToEmpty();
}
inline const std::string& PushTickItem::chgpercent() const {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.chgPercent)
  return _internal_chgpercent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PushTickItem::set_chgpercent(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chgpercent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quote.PushTickItem.chgPercent)
}
inline std::string* PushTickItem::mutable_chgpercent() {
  std::string* _s = _internal_mutable_chgpercent();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.chgPercent)
  return _s;
}
inline const std::string& PushTickItem::_internal_chgpercent() const {
  return _impl_.chgpercent_.Get();
}
inline void PushTickItem::_internal_set_chgpercent(const std::string& value) {
  
  _impl_.chgpercent_.Set(value, GetArenaForAllocation());
}
inline std::string* PushTickItem::_internal_mutable_chgpercent() {
  
  return _impl_.chgpercent_.Mutable(GetArenaForAllocation());
}
inline std::string* PushTickItem::release_chgpercent() {
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.chgPercent)
  return _impl_.chgpercent_.Release();
}
inline void PushTickItem::set_allocated_chgpercent(std::string* chgpercent) {
  if (chgpercent != nullptr) {
    
  } else {
    
  }
  _impl_.chgpercent_.SetAllocated(chgpercent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chgpercent_.IsDefault()) {
    _impl_.chgpercent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.chgPercent)
}

// string bid = 5;
inline void PushTickItem::clear_bid() {
  _impl_.bid_.ClearToEmpty();
}
inline const std::string& PushTickItem::bid() const {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.bid)
  return _internal_bid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PushTickItem::set_bid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quote.PushTickItem.bid)
}
inline std::string* PushTickItem::mutable_bid() {
  std::string* _s = _internal_mutable_bid();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.bid)
  return _s;
}
inline const std::string& PushTickItem::_internal_bid() const {
  return _impl_.bid_.Get();
}
inline void PushTickItem::_internal_set_bid(const std::string& value) {
  
  _impl_.bid_.Set(value, GetArenaForAllocation());
}
inline std::string* PushTickItem::_internal_mutable_bid() {
  
  return _impl_.bid_.Mutable(GetArenaForAllocation());
}
inline std::string* PushTickItem::release_bid() {
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.bid)
  return _impl_.bid_.Release();
}
inline void PushTickItem::set_allocated_bid(std::string* bid) {
  if (bid != nullptr) {
    
  } else {
    
  }
  _impl_.bid_.SetAllocated(bid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bid_.IsDefault()) {
    _impl_.bid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.bid)
}

// string ask = 6;
inline void PushTickItem::clear_ask() {
  _impl_.ask_.ClearToEmpty();
}
inline const std::string& PushTickItem::ask() const {
  // @@protoc_insertion_point(field_get:Quote.PushTickItem.ask)
  return _internal_ask();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PushTickItem::set_ask(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ask_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Quote.PushTickItem.ask)
}
inline std::string* PushTickItem::mutable_ask() {
  std::string* _s = _internal_mutable_ask();
  // @@protoc_insertion_point(field_mutable:Quote.PushTickItem.ask)
  return _s;
}
inline const std::string& PushTickItem::_internal_ask() const {
  return _impl_.ask_.Get();
}
inline void PushTickItem::_internal_set_ask(const std::string& value) {
  
  _impl_.ask_.Set(value, GetArenaForAllocation());
}
inline std::string* PushTickItem::_internal_mutable_ask() {
  
  return _impl_.ask_.Mutable(GetArenaForAllocation());
}
inline std::string* PushTickItem::release_ask() {
  // @@protoc_insertion_point(field_release:Quote.PushTickItem.ask)
  return _impl_.ask_.Release();
}
inline void PushTickItem::set_allocated_ask(std::string* ask) {
  if (ask != nullptr) {
    
  } else {
    
  }
  _impl_.ask_.SetAllocated(ask, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ask_.IsDefault()) {
    _impl_.ask_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Quote.PushTickItem.ask)
}

// -------------------------------------------------------------------

// PushTickNotify

// repeated .Quote.PushTickItem tickList = 1;
inline int PushTickNotify::_internal_ticklist_size() const {
  return _impl_.ticklist_.size();
}
inline int PushTickNotify::ticklist_size() const {
  return _internal_ticklist_size();
}
inline void PushTickNotify::clear_ticklist() {
  _impl_.ticklist_.Clear();
}
inline ::Quote::PushTickItem* PushTickNotify::mutable_ticklist(int index) {
  // @@protoc_insertion_point(field_mutable:Quote.PushTickNotify.tickList)
  return _impl_.ticklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quote::PushTickItem >*
PushTickNotify::mutable_ticklist() {
  // @@protoc_insertion_point(field_mutable_list:Quote.PushTickNotify.tickList)
  return &_impl_.ticklist_;
}
inline const ::Quote::PushTickItem& PushTickNotify::_internal_ticklist(int index) const {
  return _impl_.ticklist_.Get(index);
}
inline const ::Quote::PushTickItem& PushTickNotify::ticklist(int index) const {
  // @@protoc_insertion_point(field_get:Quote.PushTickNotify.tickList)
  return _internal_ticklist(index);
}
inline ::Quote::PushTickItem* PushTickNotify::_internal_add_ticklist() {
  return _impl_.ticklist_.Add();
}
inline ::Quote::PushTickItem* PushTickNotify::add_ticklist() {
  ::Quote::PushTickItem* _add = _internal_add_ticklist();
  // @@protoc_insertion_point(field_add:Quote.PushTickNotify.tickList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Quote::PushTickItem >&
PushTickNotify::ticklist() const {
  // @@protoc_insertion_point(field_list:Quote.PushTickNotify.tickList)
  return _impl_.ticklist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Quote

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_notify_2fQuotePushTickNotify_2eproto
